"""This directive allows results to be deferred during execution"""
directive @defer on FIELD

type Address {
  firstLine: String
  id: String!
  landMark: String
  name: String
  phoneNumber: String
  pinCode: String
  secondLine: String
  userId: String!
}

type AddressConnection {
  edges: [AddressConnectionEdge]
  pageInfo: PageInfo
}

type AddressConnectionEdge {
  cursor: String
  node: Address
}

input AddressInput {
  firstLine: String
  id: String
  landMark: String
  name: String!
  phoneNumber: String!
  pinCode: String
  secondLine: String
  userId: String!
}

type AddressOutput {
  address: Address
}

input CompositeKeyCartInput {
  availabilityId: String
  itemId: String
  userId: String
}

input CreateOrderInput {
  addressId: String!
  coupenCode: String
  orderId: String
  paymentMode: String!
  userId: String!
}

type CreateOrderOutput {
  deliveredBy: Date
  orderId: String!
  paymentMetadata: PaymentMetadata
  paymentMode: String
  status: OrderStatus
  totalAmount: Float
}

scalar Date

type HomePage {
  content: [HomePageContent]
  id: String!
  itemType: String!
  name: String
  typeId: String
  widget: String!
}

type HomePageConnection {
  edges: [HomePageConnectionEdge]
  pageInfo: PageInfo
}

type HomePageConnectionEdge {
  cursor: String
  node: HomePage
}

type HomePageContent {
  description: String
  id: String!
  imageLink: String
  name: String
  offer: String
}

type ItemAvailability {
  actualPrice: Float
  available: String
  discount: Long
  discountPrice: Float
  id: String!
  itemId: String!
  unit: String
  value: Float
}

type ItemCategory {
  description: String
  id: String!
  imageLink: String
  name: String
  offer: String
}

type ItemCategoryConnection {
  edges: [ItemCategoryConnectionEdge]
  pageInfo: PageInfo
}

type ItemCategoryConnectionEdge {
  cursor: String
  node: ItemCategory
}

type ItemDescription {
  disclaimer: String
  itemProperties: String
  sellerName: String
}

type ItemDetails {
  averageRating: Float
  categoryId: String
  description: ItemDescription
  id: String!
  imageLink: String
  imageLinks: [String]
  isWishlist: Boolean
  itemAvailability: [ItemAvailability]
  name: String
  status: String
  subCategoryId: String
}

type ItemDetailsConnection {
  edges: [ItemDetailsConnectionEdge]
  pageInfo: PageInfo
}

type ItemDetailsConnectionEdge {
  cursor: String
  node: ItemDetails
}

type ItemSubCategory {
  categoryId: String
  description: String
  id: String!
  imageLink: String
  name: String
  offer: String
}

type ItemSubCategoryConnection {
  edges: [ItemSubCategoryConnectionEdge]
  pageInfo: PageInfo
}

type ItemSubCategoryConnectionEdge {
  cursor: String
  node: ItemSubCategory
}

"""Long type"""
scalar Long

type Mutation {
  addItemReview(itemId: String!, rating: Int, review: String, userId: String!): UserReviewOutput
  addUserCart(input: UserCartInput!): UserCartList
  changeWishList(input: UserWishListInput!): Boolean
  createOrderFromCart(input: CreateOrderInput): CreateOrderOutput!
  deleteAddress(id: String!): Boolean
  updateUser(input: UserDetailsInput!): UserDetailsOutput
  upsertAddress(input: AddressInput!): AddressOutput
}

type OrderStatus {
  confirmed: Boolean
  delivered: Boolean
  payment: String
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PaymentMetadata {
  externalOrderId: String
  gatewayName: String
  orderId: String!
  publicKey: String
  secretKey: String
}

type Query {
  checkOut: String
  getAddress(after: String, first: Int, userId: String): AddressConnection
  getHomePage(after: String, first: Int): HomePageConnection
  getItemCategory(after: String, first: Int): ItemCategoryConnection
  getItemCategoryContentById(after: String, categoryId: String, first: Int): ItemCategoryConnection
  getItemDetails(after: String, first: Int, itemType: String, typeId: String, userId: String): ItemDetailsConnection
  getItemDetailsById(itemId: String!, userId: String): ItemDetails
  getItemReview(after: String, first: Int, itemId: String!): UserReviewConnection
  getItemSubCategoryByCategoryId(after: String, categoryId: String, first: Int): ItemSubCategoryConnection
  getUserById(id: String!): UserDetails
  getUserCart(after: String, first: Int, userId: String!): UserCartListConnection
  getUserOrderById(orderId: String!): UserOrderSet
  getUserOrderSet(after: String, first: Int, userId: String!): UserOrderSetConnection
  getUserWishList(after: String, first: Int, userId: String): ItemDetailsConnection
}

input UserCartInput {
  id: CompositeKeyCartInput
  quantity: Float
}

type UserCartList {
  availabilityId: String
  discountPrice: Float
  id: String!
  imageLink: String
  itemId: String
  itemName: String
  quantity: Float
  unit: String
  userId: String
  value: Float
}

type UserCartListConnection {
  edges: [UserCartListConnectionEdge]
  pageInfo: PageInfo
}

type UserCartListConnectionEdge {
  cursor: String
  node: UserCartList
}

type UserDetails {
  email: String
  firstName: String
  id: String!
  lastName: String
  status: String
}

input UserDetailsInput {
  firstName: String
  id: String!
  lastName: String
}

type UserDetailsOutput {
  userDetails: UserDetails
}

type UserOrder {
  amount: Float
  availabilityId: String
  imageLink: String
  itemId: String!
  itemName: String
  quantity: Float
  unit: String
  value: Float
}

type UserOrderSet {
  addressDetails: Address
  addressId: String
  coupenCode: String
  coupenDiscount: Float
  deliveredBy: Date
  deliveryCharge: Float
  id: String!
  netAmount: Float
  orderAt: Date
  orderDetails: String
  orderList: [UserOrder]
  paymentMode: String
  status: OrderStatus
  totalAmount: Float
  userId: String!
}

type UserOrderSetConnection {
  edges: [UserOrderSetConnectionEdge]
  pageInfo: PageInfo
}

type UserOrderSetConnectionEdge {
  cursor: String
  node: UserOrderSet
}

type UserReviewConnection {
  edges: [UserReviewConnectionEdge]
  pageInfo: PageInfo
}

type UserReviewConnectionEdge {
  cursor: String
  node: UserReviewOutput
}

type UserReviewOutput {
  changedAt: Date
  id: String!
  itemId: String
  rating: Int
  review: String
  userId: String
  userName: String
}

input UserWishListInput {
  itemId: String!
  type: String
  userId: String!
}

